// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace VIO {
namespace Api {
namespace Common {
class CommandFeedback;
class CommandFeedbackDefaultTypeInternal;
extern CommandFeedbackDefaultTypeInternal _CommandFeedback_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class Point2D;
class Point2DDefaultTypeInternal;
extern Point2DDefaultTypeInternal _Point2D_default_instance_;
class PointCloudXY;
class PointCloudXYDefaultTypeInternal;
extern PointCloudXYDefaultTypeInternal _PointCloudXY_default_instance_;
class Pose;
class PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
class ProtoBool;
class ProtoBoolDefaultTypeInternal;
extern ProtoBoolDefaultTypeInternal _ProtoBool_default_instance_;
class ProtoFloat;
class ProtoFloatDefaultTypeInternal;
extern ProtoFloatDefaultTypeInternal _ProtoFloat_default_instance_;
class ProtoInt;
class ProtoIntDefaultTypeInternal;
extern ProtoIntDefaultTypeInternal _ProtoInt_default_instance_;
class ProtoString;
class ProtoStringDefaultTypeInternal;
extern ProtoStringDefaultTypeInternal _ProtoString_default_instance_;
class Timestamp;
class TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
class TimestampStr;
class TimestampStrDefaultTypeInternal;
extern TimestampStrDefaultTypeInternal _TimestampStr_default_instance_;
}  // namespace Common
}  // namespace Api
}  // namespace VIO
PROTOBUF_NAMESPACE_OPEN
template<> ::VIO::Api::Common::CommandFeedback* Arena::CreateMaybeMessage<::VIO::Api::Common::CommandFeedback>(Arena*);
template<> ::VIO::Api::Common::Empty* Arena::CreateMaybeMessage<::VIO::Api::Common::Empty>(Arena*);
template<> ::VIO::Api::Common::Point2D* Arena::CreateMaybeMessage<::VIO::Api::Common::Point2D>(Arena*);
template<> ::VIO::Api::Common::PointCloudXY* Arena::CreateMaybeMessage<::VIO::Api::Common::PointCloudXY>(Arena*);
template<> ::VIO::Api::Common::Pose* Arena::CreateMaybeMessage<::VIO::Api::Common::Pose>(Arena*);
template<> ::VIO::Api::Common::ProtoBool* Arena::CreateMaybeMessage<::VIO::Api::Common::ProtoBool>(Arena*);
template<> ::VIO::Api::Common::ProtoFloat* Arena::CreateMaybeMessage<::VIO::Api::Common::ProtoFloat>(Arena*);
template<> ::VIO::Api::Common::ProtoInt* Arena::CreateMaybeMessage<::VIO::Api::Common::ProtoInt>(Arena*);
template<> ::VIO::Api::Common::ProtoString* Arena::CreateMaybeMessage<::VIO::Api::Common::ProtoString>(Arena*);
template<> ::VIO::Api::Common::Timestamp* Arena::CreateMaybeMessage<::VIO::Api::Common::Timestamp>(Arena*);
template<> ::VIO::Api::Common::TimestampStr* Arena::CreateMaybeMessage<::VIO::Api::Common::TimestampStr>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace VIO {
namespace Api {
namespace Common {

enum StateEnum : int {
  PENDING = 0,
  ACTIVE = 1,
  PREEMPTED = 2,
  SUCCEEDED = 3,
  ABORTED = 4,
  REJECTED = 5,
  PREEMPTING = 6,
  RECALLING = 7,
  RECALLED = 8,
  LOST = 9,
  StateEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StateEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StateEnum_IsValid(int value);
constexpr StateEnum StateEnum_MIN = PENDING;
constexpr StateEnum StateEnum_MAX = LOST;
constexpr int StateEnum_ARRAYSIZE = StateEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StateEnum_descriptor();
template<typename T>
inline const std::string& StateEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StateEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StateEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StateEnum_descriptor(), enum_t_value);
}
inline bool StateEnum_Parse(
    const std::string& name, StateEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StateEnum>(
    StateEnum_descriptor(), name, value);
}
enum LevelEnum : int {
  OK = 0,
  WARN = 1,
  ERROR = 2,
  STALE = 3,
  LevelEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LevelEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LevelEnum_IsValid(int value);
constexpr LevelEnum LevelEnum_MIN = OK;
constexpr LevelEnum LevelEnum_MAX = STALE;
constexpr int LevelEnum_ARRAYSIZE = LevelEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LevelEnum_descriptor();
template<typename T>
inline const std::string& LevelEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LevelEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LevelEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LevelEnum_descriptor(), enum_t_value);
}
inline bool LevelEnum_Parse(
    const std::string& name, LevelEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LevelEnum>(
    LevelEnum_descriptor(), name, value);
}
// ===================================================================

class Empty :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VIO.Api.Common.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VIO.Api.Common.Empty";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:VIO.Api.Common.Empty)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ProtoString :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VIO.Api.Common.ProtoString) */ {
 public:
  ProtoString();
  virtual ~ProtoString();

  ProtoString(const ProtoString& from);
  ProtoString(ProtoString&& from) noexcept
    : ProtoString() {
    *this = ::std::move(from);
  }

  inline ProtoString& operator=(const ProtoString& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoString& operator=(ProtoString&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoString* internal_default_instance() {
    return reinterpret_cast<const ProtoString*>(
               &_ProtoString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProtoString& a, ProtoString& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoString* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoString* New() const final {
    return CreateMaybeMessage<ProtoString>(nullptr);
  }

  ProtoString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoString& from);
  void MergeFrom(const ProtoString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VIO.Api.Common.ProtoString";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // string data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:VIO.Api.Common.ProtoString)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CommandFeedback :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VIO.Api.Common.CommandFeedback) */ {
 public:
  CommandFeedback();
  virtual ~CommandFeedback();

  CommandFeedback(const CommandFeedback& from);
  CommandFeedback(CommandFeedback&& from) noexcept
    : CommandFeedback() {
    *this = ::std::move(from);
  }

  inline CommandFeedback& operator=(const CommandFeedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandFeedback& operator=(CommandFeedback&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandFeedback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandFeedback* internal_default_instance() {
    return reinterpret_cast<const CommandFeedback*>(
               &_CommandFeedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CommandFeedback& a, CommandFeedback& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandFeedback* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandFeedback* New() const final {
    return CreateMaybeMessage<CommandFeedback>(nullptr);
  }

  CommandFeedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandFeedback>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandFeedback& from);
  void MergeFrom(const CommandFeedback& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandFeedback* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VIO.Api.Common.CommandFeedback";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // uint32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:VIO.Api.Common.CommandFeedback)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Pose :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VIO.Api.Common.Pose) */ {
 public:
  Pose();
  virtual ~Pose();

  Pose(const Pose& from);
  Pose(Pose&& from) noexcept
    : Pose() {
    *this = ::std::move(from);
  }

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose& operator=(Pose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
               &_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Pose& a, Pose& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pose* New() const final {
    return CreateMaybeMessage<Pose>(nullptr);
  }

  Pose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pose& from);
  void MergeFrom(const Pose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VIO.Api.Common.Pose";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kOrientationFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float orientation = 3;
  void clear_orientation();
  float orientation() const;
  void set_orientation(float value);
  private:
  float _internal_orientation() const;
  void _internal_set_orientation(float value);
  public:

  // @@protoc_insertion_point(class_scope:VIO.Api.Common.Pose)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float orientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Point2D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VIO.Api.Common.Point2D) */ {
 public:
  Point2D();
  virtual ~Point2D();

  Point2D(const Point2D& from);
  Point2D(Point2D&& from) noexcept
    : Point2D() {
    *this = ::std::move(from);
  }

  inline Point2D& operator=(const Point2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point2D& operator=(Point2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point2D* internal_default_instance() {
    return reinterpret_cast<const Point2D*>(
               &_Point2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Point2D& a, Point2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Point2D* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point2D* New() const final {
    return CreateMaybeMessage<Point2D>(nullptr);
  }

  Point2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point2D& from);
  void MergeFrom(const Point2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VIO.Api.Common.Point2D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:VIO.Api.Common.Point2D)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ProtoInt :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VIO.Api.Common.ProtoInt) */ {
 public:
  ProtoInt();
  virtual ~ProtoInt();

  ProtoInt(const ProtoInt& from);
  ProtoInt(ProtoInt&& from) noexcept
    : ProtoInt() {
    *this = ::std::move(from);
  }

  inline ProtoInt& operator=(const ProtoInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoInt& operator=(ProtoInt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoInt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoInt* internal_default_instance() {
    return reinterpret_cast<const ProtoInt*>(
               &_ProtoInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProtoInt& a, ProtoInt& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoInt* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoInt* New() const final {
    return CreateMaybeMessage<ProtoInt>(nullptr);
  }

  ProtoInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoInt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoInt& from);
  void MergeFrom(const ProtoInt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoInt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VIO.Api.Common.ProtoInt";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // int32 data = 1;
  void clear_data();
  ::PROTOBUF_NAMESPACE_ID::int32 data() const;
  void set_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data() const;
  void _internal_set_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:VIO.Api.Common.ProtoInt)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ProtoBool :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VIO.Api.Common.ProtoBool) */ {
 public:
  ProtoBool();
  virtual ~ProtoBool();

  ProtoBool(const ProtoBool& from);
  ProtoBool(ProtoBool&& from) noexcept
    : ProtoBool() {
    *this = ::std::move(from);
  }

  inline ProtoBool& operator=(const ProtoBool& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoBool& operator=(ProtoBool&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoBool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoBool* internal_default_instance() {
    return reinterpret_cast<const ProtoBool*>(
               &_ProtoBool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ProtoBool& a, ProtoBool& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoBool* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoBool* New() const final {
    return CreateMaybeMessage<ProtoBool>(nullptr);
  }

  ProtoBool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoBool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoBool& from);
  void MergeFrom(const ProtoBool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoBool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VIO.Api.Common.ProtoBool";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bool data = 1;
  void clear_data();
  bool data() const;
  void set_data(bool value);
  private:
  bool _internal_data() const;
  void _internal_set_data(bool value);
  public:

  // @@protoc_insertion_point(class_scope:VIO.Api.Common.ProtoBool)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ProtoFloat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VIO.Api.Common.ProtoFloat) */ {
 public:
  ProtoFloat();
  virtual ~ProtoFloat();

  ProtoFloat(const ProtoFloat& from);
  ProtoFloat(ProtoFloat&& from) noexcept
    : ProtoFloat() {
    *this = ::std::move(from);
  }

  inline ProtoFloat& operator=(const ProtoFloat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoFloat& operator=(ProtoFloat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoFloat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoFloat* internal_default_instance() {
    return reinterpret_cast<const ProtoFloat*>(
               &_ProtoFloat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ProtoFloat& a, ProtoFloat& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoFloat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoFloat* New() const final {
    return CreateMaybeMessage<ProtoFloat>(nullptr);
  }

  ProtoFloat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoFloat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoFloat& from);
  void MergeFrom(const ProtoFloat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoFloat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VIO.Api.Common.ProtoFloat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // float data = 1;
  void clear_data();
  float data() const;
  void set_data(float value);
  private:
  float _internal_data() const;
  void _internal_set_data(float value);
  public:

  // @@protoc_insertion_point(class_scope:VIO.Api.Common.ProtoFloat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Timestamp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VIO.Api.Common.Timestamp) */ {
 public:
  Timestamp();
  virtual ~Timestamp();

  Timestamp(const Timestamp& from);
  Timestamp(Timestamp&& from) noexcept
    : Timestamp() {
    *this = ::std::move(from);
  }

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Timestamp& operator=(Timestamp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Timestamp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Timestamp* internal_default_instance() {
    return reinterpret_cast<const Timestamp*>(
               &_Timestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Timestamp& a, Timestamp& b) {
    a.Swap(&b);
  }
  inline void Swap(Timestamp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Timestamp* New() const final {
    return CreateMaybeMessage<Timestamp>(nullptr);
  }

  Timestamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Timestamp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Timestamp& from);
  void MergeFrom(const Timestamp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timestamp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VIO.Api.Common.Timestamp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecFieldNumber = 1,
    kUsecFieldNumber = 2,
  };
  // uint32 sec = 1;
  void clear_sec();
  ::PROTOBUF_NAMESPACE_ID::uint32 sec() const;
  void set_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sec() const;
  void _internal_set_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 usec = 2;
  void clear_usec();
  ::PROTOBUF_NAMESPACE_ID::uint32 usec() const;
  void set_usec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_usec() const;
  void _internal_set_usec(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:VIO.Api.Common.Timestamp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 usec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TimestampStr :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VIO.Api.Common.TimestampStr) */ {
 public:
  TimestampStr();
  virtual ~TimestampStr();

  TimestampStr(const TimestampStr& from);
  TimestampStr(TimestampStr&& from) noexcept
    : TimestampStr() {
    *this = ::std::move(from);
  }

  inline TimestampStr& operator=(const TimestampStr& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimestampStr& operator=(TimestampStr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimestampStr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimestampStr* internal_default_instance() {
    return reinterpret_cast<const TimestampStr*>(
               &_TimestampStr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TimestampStr& a, TimestampStr& b) {
    a.Swap(&b);
  }
  inline void Swap(TimestampStr* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimestampStr* New() const final {
    return CreateMaybeMessage<TimestampStr>(nullptr);
  }

  TimestampStr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimestampStr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimestampStr& from);
  void MergeFrom(const TimestampStr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimestampStr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VIO.Api.Common.TimestampStr";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // string time = 1;
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // @@protoc_insertion_point(class_scope:VIO.Api.Common.TimestampStr)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class PointCloudXY :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VIO.Api.Common.PointCloudXY) */ {
 public:
  PointCloudXY();
  virtual ~PointCloudXY();

  PointCloudXY(const PointCloudXY& from);
  PointCloudXY(PointCloudXY&& from) noexcept
    : PointCloudXY() {
    *this = ::std::move(from);
  }

  inline PointCloudXY& operator=(const PointCloudXY& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloudXY& operator=(PointCloudXY&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointCloudXY& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointCloudXY* internal_default_instance() {
    return reinterpret_cast<const PointCloudXY*>(
               &_PointCloudXY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PointCloudXY& a, PointCloudXY& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloudXY* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointCloudXY* New() const final {
    return CreateMaybeMessage<PointCloudXY>(nullptr);
  }

  PointCloudXY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointCloudXY>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointCloudXY& from);
  void MergeFrom(const PointCloudXY& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloudXY* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VIO.Api.Common.PointCloudXY";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 2,
    kStampFieldNumber = 1,
  };
  // repeated .VIO.Api.Common.Point2D points = 2;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::VIO::Api::Common::Point2D* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VIO::Api::Common::Point2D >*
      mutable_points();
  private:
  const ::VIO::Api::Common::Point2D& _internal_points(int index) const;
  ::VIO::Api::Common::Point2D* _internal_add_points();
  public:
  const ::VIO::Api::Common::Point2D& points(int index) const;
  ::VIO::Api::Common::Point2D* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VIO::Api::Common::Point2D >&
      points() const;

  // double stamp = 1;
  void clear_stamp();
  double stamp() const;
  void set_stamp(double value);
  private:
  double _internal_stamp() const;
  void _internal_set_stamp(double value);
  public:

  // @@protoc_insertion_point(class_scope:VIO.Api.Common.PointCloudXY)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VIO::Api::Common::Point2D > points_;
  double stamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// ProtoString

// string data = 1;
inline void ProtoString::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProtoString::data() const {
  // @@protoc_insertion_point(field_get:VIO.Api.Common.ProtoString.data)
  return _internal_data();
}
inline void ProtoString::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:VIO.Api.Common.ProtoString.data)
}
inline std::string* ProtoString::mutable_data() {
  // @@protoc_insertion_point(field_mutable:VIO.Api.Common.ProtoString.data)
  return _internal_mutable_data();
}
inline const std::string& ProtoString::_internal_data() const {
  return data_.GetNoArena();
}
inline void ProtoString::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProtoString::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VIO.Api.Common.ProtoString.data)
}
inline void ProtoString::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VIO.Api.Common.ProtoString.data)
}
inline void ProtoString::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VIO.Api.Common.ProtoString.data)
}
inline std::string* ProtoString::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProtoString::release_data() {
  // @@protoc_insertion_point(field_release:VIO.Api.Common.ProtoString.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoString::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:VIO.Api.Common.ProtoString.data)
}

// -------------------------------------------------------------------

// CommandFeedback

// uint32 status = 1;
inline void CommandFeedback::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandFeedback::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandFeedback::status() const {
  // @@protoc_insertion_point(field_get:VIO.Api.Common.CommandFeedback.status)
  return _internal_status();
}
inline void CommandFeedback::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
}
inline void CommandFeedback::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:VIO.Api.Common.CommandFeedback.status)
}

// -------------------------------------------------------------------

// Pose

// float x = 1;
inline void Pose::clear_x() {
  x_ = 0;
}
inline float Pose::_internal_x() const {
  return x_;
}
inline float Pose::x() const {
  // @@protoc_insertion_point(field_get:VIO.Api.Common.Pose.x)
  return _internal_x();
}
inline void Pose::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Pose::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:VIO.Api.Common.Pose.x)
}

// float y = 2;
inline void Pose::clear_y() {
  y_ = 0;
}
inline float Pose::_internal_y() const {
  return y_;
}
inline float Pose::y() const {
  // @@protoc_insertion_point(field_get:VIO.Api.Common.Pose.y)
  return _internal_y();
}
inline void Pose::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Pose::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:VIO.Api.Common.Pose.y)
}

// float orientation = 3;
inline void Pose::clear_orientation() {
  orientation_ = 0;
}
inline float Pose::_internal_orientation() const {
  return orientation_;
}
inline float Pose::orientation() const {
  // @@protoc_insertion_point(field_get:VIO.Api.Common.Pose.orientation)
  return _internal_orientation();
}
inline void Pose::_internal_set_orientation(float value) {
  
  orientation_ = value;
}
inline void Pose::set_orientation(float value) {
  _internal_set_orientation(value);
  // @@protoc_insertion_point(field_set:VIO.Api.Common.Pose.orientation)
}

// -------------------------------------------------------------------

// Point2D

// float x = 1;
inline void Point2D::clear_x() {
  x_ = 0;
}
inline float Point2D::_internal_x() const {
  return x_;
}
inline float Point2D::x() const {
  // @@protoc_insertion_point(field_get:VIO.Api.Common.Point2D.x)
  return _internal_x();
}
inline void Point2D::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Point2D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:VIO.Api.Common.Point2D.x)
}

// float y = 2;
inline void Point2D::clear_y() {
  y_ = 0;
}
inline float Point2D::_internal_y() const {
  return y_;
}
inline float Point2D::y() const {
  // @@protoc_insertion_point(field_get:VIO.Api.Common.Point2D.y)
  return _internal_y();
}
inline void Point2D::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Point2D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:VIO.Api.Common.Point2D.y)
}

// -------------------------------------------------------------------

// ProtoInt

// int32 data = 1;
inline void ProtoInt::clear_data() {
  data_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoInt::_internal_data() const {
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoInt::data() const {
  // @@protoc_insertion_point(field_get:VIO.Api.Common.ProtoInt.data)
  return _internal_data();
}
inline void ProtoInt::_internal_set_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  data_ = value;
}
inline void ProtoInt::set_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:VIO.Api.Common.ProtoInt.data)
}

// -------------------------------------------------------------------

// ProtoBool

// bool data = 1;
inline void ProtoBool::clear_data() {
  data_ = false;
}
inline bool ProtoBool::_internal_data() const {
  return data_;
}
inline bool ProtoBool::data() const {
  // @@protoc_insertion_point(field_get:VIO.Api.Common.ProtoBool.data)
  return _internal_data();
}
inline void ProtoBool::_internal_set_data(bool value) {
  
  data_ = value;
}
inline void ProtoBool::set_data(bool value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:VIO.Api.Common.ProtoBool.data)
}

// -------------------------------------------------------------------

// ProtoFloat

// float data = 1;
inline void ProtoFloat::clear_data() {
  data_ = 0;
}
inline float ProtoFloat::_internal_data() const {
  return data_;
}
inline float ProtoFloat::data() const {
  // @@protoc_insertion_point(field_get:VIO.Api.Common.ProtoFloat.data)
  return _internal_data();
}
inline void ProtoFloat::_internal_set_data(float value) {
  
  data_ = value;
}
inline void ProtoFloat::set_data(float value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:VIO.Api.Common.ProtoFloat.data)
}

// -------------------------------------------------------------------

// Timestamp

// uint32 sec = 1;
inline void Timestamp::clear_sec() {
  sec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Timestamp::_internal_sec() const {
  return sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Timestamp::sec() const {
  // @@protoc_insertion_point(field_get:VIO.Api.Common.Timestamp.sec)
  return _internal_sec();
}
inline void Timestamp::_internal_set_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sec_ = value;
}
inline void Timestamp::set_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sec(value);
  // @@protoc_insertion_point(field_set:VIO.Api.Common.Timestamp.sec)
}

// uint32 usec = 2;
inline void Timestamp::clear_usec() {
  usec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Timestamp::_internal_usec() const {
  return usec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Timestamp::usec() const {
  // @@protoc_insertion_point(field_get:VIO.Api.Common.Timestamp.usec)
  return _internal_usec();
}
inline void Timestamp::_internal_set_usec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  usec_ = value;
}
inline void Timestamp::set_usec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_usec(value);
  // @@protoc_insertion_point(field_set:VIO.Api.Common.Timestamp.usec)
}

// -------------------------------------------------------------------

// TimestampStr

// string time = 1;
inline void TimestampStr::clear_time() {
  time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TimestampStr::time() const {
  // @@protoc_insertion_point(field_get:VIO.Api.Common.TimestampStr.time)
  return _internal_time();
}
inline void TimestampStr::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:VIO.Api.Common.TimestampStr.time)
}
inline std::string* TimestampStr::mutable_time() {
  // @@protoc_insertion_point(field_mutable:VIO.Api.Common.TimestampStr.time)
  return _internal_mutable_time();
}
inline const std::string& TimestampStr::_internal_time() const {
  return time_.GetNoArena();
}
inline void TimestampStr::_internal_set_time(const std::string& value) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TimestampStr::set_time(std::string&& value) {
  
  time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VIO.Api.Common.TimestampStr.time)
}
inline void TimestampStr::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VIO.Api.Common.TimestampStr.time)
}
inline void TimestampStr::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VIO.Api.Common.TimestampStr.time)
}
inline std::string* TimestampStr::_internal_mutable_time() {
  
  return time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TimestampStr::release_time() {
  // @@protoc_insertion_point(field_release:VIO.Api.Common.TimestampStr.time)
  
  return time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TimestampStr::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:VIO.Api.Common.TimestampStr.time)
}

// -------------------------------------------------------------------

// PointCloudXY

// double stamp = 1;
inline void PointCloudXY::clear_stamp() {
  stamp_ = 0;
}
inline double PointCloudXY::_internal_stamp() const {
  return stamp_;
}
inline double PointCloudXY::stamp() const {
  // @@protoc_insertion_point(field_get:VIO.Api.Common.PointCloudXY.stamp)
  return _internal_stamp();
}
inline void PointCloudXY::_internal_set_stamp(double value) {
  
  stamp_ = value;
}
inline void PointCloudXY::set_stamp(double value) {
  _internal_set_stamp(value);
  // @@protoc_insertion_point(field_set:VIO.Api.Common.PointCloudXY.stamp)
}

// repeated .VIO.Api.Common.Point2D points = 2;
inline int PointCloudXY::_internal_points_size() const {
  return points_.size();
}
inline int PointCloudXY::points_size() const {
  return _internal_points_size();
}
inline void PointCloudXY::clear_points() {
  points_.Clear();
}
inline ::VIO::Api::Common::Point2D* PointCloudXY::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:VIO.Api.Common.PointCloudXY.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VIO::Api::Common::Point2D >*
PointCloudXY::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:VIO.Api.Common.PointCloudXY.points)
  return &points_;
}
inline const ::VIO::Api::Common::Point2D& PointCloudXY::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::VIO::Api::Common::Point2D& PointCloudXY::points(int index) const {
  // @@protoc_insertion_point(field_get:VIO.Api.Common.PointCloudXY.points)
  return _internal_points(index);
}
inline ::VIO::Api::Common::Point2D* PointCloudXY::_internal_add_points() {
  return points_.Add();
}
inline ::VIO::Api::Common::Point2D* PointCloudXY::add_points() {
  // @@protoc_insertion_point(field_add:VIO.Api.Common.PointCloudXY.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VIO::Api::Common::Point2D >&
PointCloudXY::points() const {
  // @@protoc_insertion_point(field_list:VIO.Api.Common.PointCloudXY.points)
  return points_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Common
}  // namespace Api
}  // namespace VIO

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::VIO::Api::Common::StateEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VIO::Api::Common::StateEnum>() {
  return ::VIO::Api::Common::StateEnum_descriptor();
}
template <> struct is_proto_enum< ::VIO::Api::Common::LevelEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VIO::Api::Common::LevelEnum>() {
  return ::VIO::Api::Common::LevelEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
