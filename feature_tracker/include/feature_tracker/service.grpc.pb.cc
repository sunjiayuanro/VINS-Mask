// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service.proto

#include "service.pb.h"
#include "service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace VIO {
namespace Api {
namespace ServiceRpc {

static const char* Rpc_method_names[] = {
  "/VIO.Api.ServiceRpc.Rpc/CheckCommunication",
  "/VIO.Api.ServiceRpc.Rpc/GetSuperPoint",
};

std::unique_ptr< Rpc::Stub> Rpc::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Rpc::Stub> stub(new Rpc::Stub(channel));
  return stub;
}

Rpc::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CheckCommunication_(Rpc_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSuperPoint_(Rpc_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Rpc::Stub::CheckCommunication(::grpc::ClientContext* context, const ::VIO::Api::Common::ProtoString& request, ::VIO::Api::Common::CommandFeedback* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckCommunication_, context, request, response);
}

void Rpc::Stub::experimental_async::CheckCommunication(::grpc::ClientContext* context, const ::VIO::Api::Common::ProtoString* request, ::VIO::Api::Common::CommandFeedback* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckCommunication_, context, request, response, std::move(f));
}

void Rpc::Stub::experimental_async::CheckCommunication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VIO::Api::Common::CommandFeedback* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckCommunication_, context, request, response, std::move(f));
}

void Rpc::Stub::experimental_async::CheckCommunication(::grpc::ClientContext* context, const ::VIO::Api::Common::ProtoString* request, ::VIO::Api::Common::CommandFeedback* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckCommunication_, context, request, response, reactor);
}

void Rpc::Stub::experimental_async::CheckCommunication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VIO::Api::Common::CommandFeedback* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckCommunication_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VIO::Api::Common::CommandFeedback>* Rpc::Stub::AsyncCheckCommunicationRaw(::grpc::ClientContext* context, const ::VIO::Api::Common::ProtoString& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VIO::Api::Common::CommandFeedback>::Create(channel_.get(), cq, rpcmethod_CheckCommunication_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VIO::Api::Common::CommandFeedback>* Rpc::Stub::PrepareAsyncCheckCommunicationRaw(::grpc::ClientContext* context, const ::VIO::Api::Common::ProtoString& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VIO::Api::Common::CommandFeedback>::Create(channel_.get(), cq, rpcmethod_CheckCommunication_, context, request, false);
}

::grpc::Status Rpc::Stub::GetSuperPoint(::grpc::ClientContext* context, const ::VIO::Api::Common::ProtoString& request, ::VIO::Api::Common::PointCloudXY* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSuperPoint_, context, request, response);
}

void Rpc::Stub::experimental_async::GetSuperPoint(::grpc::ClientContext* context, const ::VIO::Api::Common::ProtoString* request, ::VIO::Api::Common::PointCloudXY* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSuperPoint_, context, request, response, std::move(f));
}

void Rpc::Stub::experimental_async::GetSuperPoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VIO::Api::Common::PointCloudXY* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSuperPoint_, context, request, response, std::move(f));
}

void Rpc::Stub::experimental_async::GetSuperPoint(::grpc::ClientContext* context, const ::VIO::Api::Common::ProtoString* request, ::VIO::Api::Common::PointCloudXY* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSuperPoint_, context, request, response, reactor);
}

void Rpc::Stub::experimental_async::GetSuperPoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::VIO::Api::Common::PointCloudXY* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSuperPoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::VIO::Api::Common::PointCloudXY>* Rpc::Stub::AsyncGetSuperPointRaw(::grpc::ClientContext* context, const ::VIO::Api::Common::ProtoString& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VIO::Api::Common::PointCloudXY>::Create(channel_.get(), cq, rpcmethod_GetSuperPoint_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::VIO::Api::Common::PointCloudXY>* Rpc::Stub::PrepareAsyncGetSuperPointRaw(::grpc::ClientContext* context, const ::VIO::Api::Common::ProtoString& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::VIO::Api::Common::PointCloudXY>::Create(channel_.get(), cq, rpcmethod_GetSuperPoint_, context, request, false);
}

Rpc::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rpc_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rpc::Service, ::VIO::Api::Common::ProtoString, ::VIO::Api::Common::CommandFeedback>(
          [](Rpc::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::VIO::Api::Common::ProtoString* req,
             ::VIO::Api::Common::CommandFeedback* resp) {
               return service->CheckCommunication(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rpc_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rpc::Service, ::VIO::Api::Common::ProtoString, ::VIO::Api::Common::PointCloudXY>(
          [](Rpc::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::VIO::Api::Common::ProtoString* req,
             ::VIO::Api::Common::PointCloudXY* resp) {
               return service->GetSuperPoint(ctx, req, resp);
             }, this)));
}

Rpc::Service::~Service() {
}

::grpc::Status Rpc::Service::CheckCommunication(::grpc::ServerContext* context, const ::VIO::Api::Common::ProtoString* request, ::VIO::Api::Common::CommandFeedback* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rpc::Service::GetSuperPoint(::grpc::ServerContext* context, const ::VIO::Api::Common::ProtoString* request, ::VIO::Api::Common::PointCloudXY* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace VIO
}  // namespace Api
}  // namespace ServiceRpc

