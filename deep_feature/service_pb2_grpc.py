# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import common_pb2 as common__pb2


class RpcStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CheckCommunication = channel.unary_unary(
                '/VIO.Api.ServiceRpc.Rpc/CheckCommunication',
                request_serializer=common__pb2.ProtoString.SerializeToString,
                response_deserializer=common__pb2.CommandFeedback.FromString,
                )
        self.GetSuperPoint = channel.unary_unary(
                '/VIO.Api.ServiceRpc.Rpc/GetSuperPoint',
                request_serializer=common__pb2.ProtoString.SerializeToString,
                response_deserializer=common__pb2.PointCloudXY.FromString,
                )


class RpcServicer(object):
    """Missing associated documentation comment in .proto file"""

    def CheckCommunication(self, request, context):
        """Check
        @return Common.StateEnum
        @RPC_ID=0
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSuperPoint(self, request, context):
        """SuperPoint
        @RPC_ID=1
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RpcServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CheckCommunication': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckCommunication,
                    request_deserializer=common__pb2.ProtoString.FromString,
                    response_serializer=common__pb2.CommandFeedback.SerializeToString,
            ),
            'GetSuperPoint': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSuperPoint,
                    request_deserializer=common__pb2.ProtoString.FromString,
                    response_serializer=common__pb2.PointCloudXY.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'VIO.Api.ServiceRpc.Rpc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Rpc(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def CheckCommunication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VIO.Api.ServiceRpc.Rpc/CheckCommunication',
            common__pb2.ProtoString.SerializeToString,
            common__pb2.CommandFeedback.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSuperPoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VIO.Api.ServiceRpc.Rpc/GetSuperPoint',
            common__pb2.ProtoString.SerializeToString,
            common__pb2.PointCloudXY.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
